# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    router.request_context.host: 'urabstimmung.stura.uni-jena.de'
    router.request_context.scheme: 'https'

    app.version: '1.1.2'
    app.timezone: 'Europe/Berlin'
    app.support_email: '%env(SUPPORT_EMAIL)%'
    app.mail.from_email: '%env(FROM_EMAIL)%'
    app.mail.from_name: '%env(FROM_NAME)%'
    app.mail.envelope_sender: '%env(string:ENVELOPE_SENDER)%'
    app.send_notifications: '%env(bool:SEND_NOTIFICATIONS)%'
    app.registration_closed: '%env(bool:REGISTRATION_CLOSED)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            string $app_version: '%app.version%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    App\Services\TFA\BackupCodeGenerator:
        arguments:
            $code_length: 8
            $code_count: 15

    App\EventSubscriber\SetEmailFromSubscriber:
        arguments:
            $email: '%app.mail.from_email%'
            $name: '%app.mail.from_name%'
            $envelope_sender: '%app.mail.envelope_sender%'

    # Workaround for a issue with auditor bundle (see https://github.com/DamienHarper/auditor-bundle/issues/228)
    DH\Auditor\Provider\Doctrine\Auditing\Transaction\TransactionManager:
        arguments: [ '@DH\Auditor\Provider\Doctrine\DoctrineProvider' ]

    DH\Auditor\Provider\Doctrine\Auditing\Event\DoctrineSubscriber:
        arguments: [ '@DH\Auditor\Provider\Doctrine\Auditing\Transaction\TransactionManager' ]
        tags:
            - { name: doctrine.event_subscriber }

    dh_auditor.anonymized_security_provider:
        class: 'App\Audit\AnonymizedIPSecurityProvider'
        arguments:
            $firewallMap: '@security.firewall.map'

    dh_auditor.user_provider: '@App\Audit\UserProvider'

    App\Audit\UserProvider:
        tags:
            - { name: 'doctrine.event_subscriber' }

    App\EventSubscriber\Fail2BanSubscriber:
        arguments:
            $fail2banLogger: '@monolog.logger.fail2ban'

    App\EventSubscriber\SetTimezoneSubscriber:
        arguments:
            $timezone: '%app.timezone%'


    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
